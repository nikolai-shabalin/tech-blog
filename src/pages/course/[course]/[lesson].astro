---
import { getEntry, type CollectionEntry } from 'astro:content';
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE } from '../../../consts';

// Эта функция нужна для генерации статических путей. 
// Мы должны найти все уроки и создать для них пути.
export async function getStaticPaths() {
  const lessons = await getEntry('lessons', 'javascript/00-about-course');
  // В будущем здесь нужно будет получать все уроки для всех курсов
  return [
    {
      params: { course: 'javascript', lesson: 'about-course' },
      props: { courseSlug: 'javascript', lessonSlug: 'about-course' }
    }
  ];
}

const { courseSlug, lessonSlug } = Astro.props;

const course = await getEntry('courses', courseSlug);
const lesson = await getEntry('lessons', `${courseSlug}/${lessonSlug}`);

if (!course || !lesson) {
  return Astro.redirect('/course/');
}

const { Content } = await lesson.render();

const currentLessonIndex = course.data.lessons.findIndex(l => l.slug === lessonSlug);
const prevLesson = currentLessonIndex > 0 ? course.data.lessons[currentLessonIndex - 1] : null;
const nextLesson = currentLessonIndex < course.data.lessons.length - 1 ? course.data.lessons[currentLessonIndex + 1] : null;
---

<!doctype html>
<html lang="ru">
	<head>
		<BaseHead title={`${lesson.data.title} | ${course.data.title} | ${SITE_TITLE}`} description={lesson.data.description} />
	</head>
	<body>
		<Header />
		<main class="main">
			<div class="container">
				<nav class="breadcrumb">
					<a href="/course/" class="breadcrumb__link">Курсы</a>
					<span class="breadcrumb__separator">→</span>
					<a href={`/course/${course.slug}/`} class="breadcrumb__link">{course.data.title}</a>
					<span class="breadcrumb__separator">→</span>
					<span class="breadcrumb__current">{lesson.data.title}</span>
				</nav>

				<article class="lesson">
					<header class="lesson__header">
						<div class="lesson__meta">
							<span class="lesson__course">{course.data.title}</span>
							{lesson.data.duration && (
								<span class="lesson__duration">{lesson.data.duration}</span>
							)}
							{lesson.data.isPremium && (
								<span class="lesson__premium">Premium урок</span>
							)}
						</div>
						<h1 class="lesson__title">{lesson.data.title}</h1>
						<p class="lesson__description">{lesson.data.description}</p>
					</header>

					<div class="lesson__content">
						<Content />
					</div>

					<nav class="lesson__navigation">
						{prevLesson ? (
							<a href={`/course/${course.slug}/${prevLesson.slug}/`} class="nav-button nav-button--prev">
								<span class="nav-button__label">Предыдущий урок</span>
								<span class="nav-button__title">{prevLesson.title}</span>
							</a>
						) : <div />}
						
						{nextLesson && (
							<a href={`/course/${course.slug}/${nextLesson.slug}/`} class="nav-button nav-button--next">
								<span class="nav-button__label">Следующий урок</span>
								<span class="nav-button__title">{nextLesson.title}</span>
							</a>
						)}
					</nav>

					<div class="lesson__back">
						<a href={`/course/${course.slug}/`} class="back-link">
							← Вернуться к курсу
						</a>
					</div>
				</article>
			</div>
		</main>
		<Footer />
	</body>
</html>

<style>
	/* Стили скопированы из container-items.astro для консистентности */
	.main {
		padding: var(--space-xl) var(--space-md);
		min-height: calc(100vh - 140px);
	}

	.container {
		width: min(100%, 800px);
		margin-inline: auto;
	}

	.breadcrumb {
		display: flex;
		align-items: center;
		gap: var(--space-sm);
		margin-bottom: var(--space-lg);
		font-size: var(--text-sm);
		color: rgb(var(--gray-dark));
	}

	.breadcrumb__link {
		color: var(--accent);
		text-decoration: none;
		transition: color 0.2s ease;
	}

	.breadcrumb__link:hover {
		color: var(--accent-dark);
	}

	.breadcrumb__separator {
		color: rgb(var(--gray));
	}

	.breadcrumb__current {
		color: rgb(var(--gray-dark));
	}

	.lesson__header {
		margin-bottom: var(--space-xl);
		padding-bottom: var(--space-lg);
		border-bottom: 1px solid rgba(var(--gray), 0.2);
	}

	.lesson__meta {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-md);
		margin-bottom: var(--space-md);
		align-items: center;
	}

	.lesson__course {
		background: rgba(var(--accent-rgb), 0.1);
		color: var(--accent);
		padding: var(--space-xs) var(--space-sm);
		border-radius: 4px;
		font-size: var(--text-sm);
		font-weight: 500;
	}

	.lesson__duration {
		color: rgb(var(--gray-dark));
		font-size: var(--text-sm);
	}

	.lesson__premium {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		color: white;
		padding: var(--space-xs) var(--space-sm);
		border-radius: 4px;
		font-size: var(--text-sm);
		font-weight: 600;
	}

	.lesson__title {
		font-size: var(--text-3xl);
		font-weight: 700;
		color: rgb(var(--black));
		margin-bottom: var(--space-sm);
		line-height: 1.2;
	}

	.lesson__description {
		font-size: var(--text-lg);
		color: rgb(var(--gray-dark));
		line-height: 1.6;
	}

	.lesson__content {
		margin-bottom: var(--space-xl);
		line-height: 1.7;
	}

	.lesson__content :global(h1, h2, h3, h4, h5, h6) {
		color: rgb(var(--black));
		margin-top: var(--space-xl);
		margin-bottom: var(--space-md);
	}

	.lesson__content :global(h1) {
		font-size: var(--text-2xl);
		border-bottom: 2px solid rgba(var(--gray), 0.2);
		padding-bottom: var(--space-sm);
	}

	.lesson__content :global(h2) {
		font-size: var(--text-xl);
	}

	.lesson__content :global(h3) {
		font-size: var(--text-lg);
	}

	.lesson__content :global(p) {
		margin-bottom: var(--space-md);
	}

	.lesson__content :global(ul, ol) {
		margin-left: var(--space-lg);
		margin-bottom: var(--space-md);
	}

	.lesson__content :global(a) {
		color: var(--accent);
		text-decoration: underline;
	}

	.lesson__content :global(strong) {
		font-weight: 600;
	}

	.lesson__content :global(pre) {
		background: #f4f4f4;
		padding: var(--space-md);
		border-radius: 6px;
		overflow-x: auto;
		margin-bottom: var(--space-md);
	}

	.lesson__content :global(code) {
		font-family: var(--font-mono);
		background: rgba(var(--gray), 0.15);
		padding: 2px 6px;
		border-radius: 4px;
	}

	.lesson__content :global(pre > code) {
		background: none;
		padding: 0;
	}

	.lesson__navigation {
		display: flex;
		justify-content: space-between;
		margin-top: var(--space-xl);
		padding-top: var(--space-lg);
		border-top: 1px solid rgba(var(--gray), 0.2);
	}
	
	.nav-button {
		display: block;
		padding: var(--space-md);
		border: 1px solid rgba(var(--gray), 0.3);
		border-radius: 8px;
		text-decoration: none;
		color: rgb(var(--black));
		transition: all 0.2s ease;
		max-width: 48%;
	}

	.nav-button:hover {
		border-color: var(--accent);
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
	}

	.nav-button--prev {
		text-align: left;
	}

	.nav-button--next {
		text-align: right;
	}

	.nav-button__label {
		font-size: var(--text-sm);
		color: rgb(var(--gray-dark));
		margin-bottom: var(--space-xs);
		display: block;
	}

	.nav-button__title {
		font-weight: 600;
	}
	
	.lesson__back {
		margin-top: var(--space-xl);
		text-align: center;
	}

	.back-link {
		color: var(--accent);
		text-decoration: none;
		font-weight: 500;
	}

	.back-link:hover {
		text-decoration: underline;
	}
</style> 